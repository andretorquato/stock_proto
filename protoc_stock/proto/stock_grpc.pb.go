// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/stock.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StockPrice_GetStockPrice_FullMethodName                   = "/stock_market.StockPrice/GetStockPrice"
	StockPrice_GetStockPriceServerStreaming_FullMethodName    = "/stock_market.StockPrice/GetStockPriceServerStreaming"
	StockPrice_UpdateStockPriceClientStreaming_FullMethodName = "/stock_market.StockPrice/UpdateStockPriceClientStreaming"
)

// StockPriceClient is the client API for StockPrice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockPriceClient interface {
	GetStockPrice(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error)
	GetStockPriceServerStreaming(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockResponse], error)
	UpdateStockPriceClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateStockPriceRequest, UpdateStockPriceResponse], error)
}

type stockPriceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockPriceClient(cc grpc.ClientConnInterface) StockPriceClient {
	return &stockPriceClient{cc}
}

func (c *stockPriceClient) GetStockPrice(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (*StockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StockResponse)
	err := c.cc.Invoke(ctx, StockPrice_GetStockPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockPriceClient) GetStockPriceServerStreaming(ctx context.Context, in *StockRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockPrice_ServiceDesc.Streams[0], StockPrice_GetStockPriceServerStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StockRequest, StockResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockPrice_GetStockPriceServerStreamingClient = grpc.ServerStreamingClient[StockResponse]

func (c *stockPriceClient) UpdateStockPriceClientStreaming(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UpdateStockPriceRequest, UpdateStockPriceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StockPrice_ServiceDesc.Streams[1], StockPrice_UpdateStockPriceClientStreaming_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UpdateStockPriceRequest, UpdateStockPriceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockPrice_UpdateStockPriceClientStreamingClient = grpc.BidiStreamingClient[UpdateStockPriceRequest, UpdateStockPriceResponse]

// StockPriceServer is the server API for StockPrice service.
// All implementations must embed UnimplementedStockPriceServer
// for forward compatibility.
type StockPriceServer interface {
	GetStockPrice(context.Context, *StockRequest) (*StockResponse, error)
	GetStockPriceServerStreaming(*StockRequest, grpc.ServerStreamingServer[StockResponse]) error
	UpdateStockPriceClientStreaming(grpc.BidiStreamingServer[UpdateStockPriceRequest, UpdateStockPriceResponse]) error
	mustEmbedUnimplementedStockPriceServer()
}

// UnimplementedStockPriceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStockPriceServer struct{}

func (UnimplementedStockPriceServer) GetStockPrice(context.Context, *StockRequest) (*StockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockPrice not implemented")
}
func (UnimplementedStockPriceServer) GetStockPriceServerStreaming(*StockRequest, grpc.ServerStreamingServer[StockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetStockPriceServerStreaming not implemented")
}
func (UnimplementedStockPriceServer) UpdateStockPriceClientStreaming(grpc.BidiStreamingServer[UpdateStockPriceRequest, UpdateStockPriceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UpdateStockPriceClientStreaming not implemented")
}
func (UnimplementedStockPriceServer) mustEmbedUnimplementedStockPriceServer() {}
func (UnimplementedStockPriceServer) testEmbeddedByValue()                    {}

// UnsafeStockPriceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockPriceServer will
// result in compilation errors.
type UnsafeStockPriceServer interface {
	mustEmbedUnimplementedStockPriceServer()
}

func RegisterStockPriceServer(s grpc.ServiceRegistrar, srv StockPriceServer) {
	// If the following call pancis, it indicates UnimplementedStockPriceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StockPrice_ServiceDesc, srv)
}

func _StockPrice_GetStockPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockPriceServer).GetStockPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockPrice_GetStockPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockPriceServer).GetStockPrice(ctx, req.(*StockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockPrice_GetStockPriceServerStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockPriceServer).GetStockPriceServerStreaming(m, &grpc.GenericServerStream[StockRequest, StockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockPrice_GetStockPriceServerStreamingServer = grpc.ServerStreamingServer[StockResponse]

func _StockPrice_UpdateStockPriceClientStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StockPriceServer).UpdateStockPriceClientStreaming(&grpc.GenericServerStream[UpdateStockPriceRequest, UpdateStockPriceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StockPrice_UpdateStockPriceClientStreamingServer = grpc.BidiStreamingServer[UpdateStockPriceRequest, UpdateStockPriceResponse]

// StockPrice_ServiceDesc is the grpc.ServiceDesc for StockPrice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockPrice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock_market.StockPrice",
	HandlerType: (*StockPriceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockPrice",
			Handler:    _StockPrice_GetStockPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockPriceServerStreaming",
			Handler:       _StockPrice_GetStockPriceServerStreaming_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateStockPriceClientStreaming",
			Handler:       _StockPrice_UpdateStockPriceClientStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/stock.proto",
}
